from django.db import models
from django.conf import settings
from django.core.validators import MinValueValidator
from django.core.exceptions import ValidationError
from django.utils.text import slugify
from django.db.models import Sum
import uuid


class Category(models.Model):
    name = models.CharField(max_length=100)
    slug = models.SlugField(unique=True, blank=True)

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name

class Size(models.Model):
    name = models.CharField(max_length=10)  # Es. "8", "S"
    description = models.CharField(max_length=50, blank=True)
    category = models.ForeignKey(  # Collega la taglia alla categoria specifica
        'Category',
        on_delete=models.CASCADE,
        null=True,
        blank=True
    )

    def __str__(self):
        return f"{self.name} ({self.description})"


class Material(models.Model):
    TYPE_CHOICES = [
        ('MT', 'Metallo'),
        ('GS', 'Pietra'),
        ('OR', 'Organico'),
    ]

    name = models.CharField(max_length=50, unique=True)
    type = models.CharField(
        max_length=2,
        choices=TYPE_CHOICES,
        default='MT'
    )

    def __str__(self):
        return self.name


class Product(models.Model):
    name = models.CharField(max_length=200)
    description = models.TextField()
    materials = models.ManyToManyField(
        Material,
        related_name='products',
        help_text="Seleziona almeno un materiale"
    )
    category = models.ForeignKey(
        'Category',
        on_delete=models.CASCADE,
        related_name='products'
    )
    price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        validators=[MinValueValidator(0.01)]
    )
    image = models.ImageField(upload_to='products/')
    available = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    sizes = models.ManyToManyField(Size, blank=True)
    requires_size = models.BooleanField(default=False)
    total_sold = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['name', 'category']),
            models.Index(fields=['requires_size'])
        ]

    def __str__(self):
        return f"{self.name} ({self.price}â‚¬)"



class Order(models.Model):
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='orders'
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    completed = models.BooleanField(default=False)
    code = models.CharField(max_length=36, unique=True, editable=False, default=uuid.uuid4)  # Codice unico per l'ordine

    shipping_address = models.TextField()
    shipping_city = models.CharField(max_length=100)
    shipping_postal_code = models.CharField(max_length=10, blank=True, null=True)
    PAYMENT_CHOICES = [
        ('cod', 'Pagamento alla consegna'),
        ('fake_card', 'Carta di credito (simulato)'),
        ('paypal', 'PayPal (simulato)'),
    ]
    payment_method = models.CharField(max_length=20, choices=PAYMENT_CHOICES, default='cod')

    class Meta:
        ordering = ['-created_at']
        permissions = [
            ("manage_orders", "Can manage orders"),  # Permesso per i manager
        ]

    def __str__(self):
        return f"Ordine {self.code} - {self.user.username}"

    @property
    def total_price(self):
        return sum(item.price * item.quantity for item in self.items.all())

    @property
    def total_quantity(self):
        return sum(item.quantity for item in self.items.all())


class OrderItem(models.Model):
    order = models.ForeignKey(
        Order,
        on_delete=models.CASCADE,
        related_name='items'
    )
    product = models.ForeignKey(
        Product,
        on_delete=models.PROTECT,  # Evita cancellazione se ci sono ordini
        related_name='order_items'
    )
    size = models.ForeignKey(
        Size,
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=['order', 'product', 'size'],
                name='unique_order_product_size'
            )
        ]

    def __str__(self):
        return f"{self.quantity}x {self.product.name}"




class Wishlist(models.Model):
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='wishlist'
    )
    products = models.ManyToManyField(
        Product,
        related_name='wishlists',
        blank=True
    )

    def __str__(self):
        return f"Wishlist di {self.user.username}"

    def add_product(self, product):
        self.products.add(product)

    def remove_product(self, product):
        self.products.remove(product)